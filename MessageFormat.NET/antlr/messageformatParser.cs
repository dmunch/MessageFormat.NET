//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from messageformat.g4 by ANTLR 4.1-SNAPSHOT
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.1-SNAPSHOT")]
public partial class messageformatParser : Parser {
	public const int
		T__24=1, T__23=2, T__22=3, T__21=4, T__20=5, T__19=6, T__18=7, T__17=8, 
		T__16=9, T__15=10, T__14=11, T__13=12, T__12=13, T__11=14, T__10=15, T__9=16, 
		T__8=17, T__7=18, T__6=19, T__5=20, T__4=21, T__3=22, T__2=23, T__1=24, 
		T__0=25, IDNUMBER=26, IDNAME=27, WS=28;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'many'", "'long'", "'short'", "'other'", "','", "'percent'", 
		"'full'", "'{'", "'spellout'", "'}'", "'few'", "'date'", "'medium'", "'='", 
		"'currency'", "'one'", "'ordinal'", "'offset:'", "'number'", "'two'", 
		"'duration'", "'zero'", "'time'", "'integer'", "'plural'", "IDNUMBER", 
		"IDNAME", "' '"
	};
	public const int
		RULE_message = 0, RULE_messageText = 1, RULE_argument = 2, RULE_noneArg = 3, 
		RULE_simpleArg = 4, RULE_pluralArg = 5, RULE_argNameOrNumber = 6, RULE_argName = 7, 
		RULE_argNumber = 8, RULE_type = 9, RULE_style = 10, RULE_pluralStyle = 11, 
		RULE_offsetValue = 12, RULE_selector = 13, RULE_explicitValue = 14, RULE_keyword = 15;
	public static readonly string[] ruleNames = {
		"message", "messageText", "argument", "noneArg", "simpleArg", "pluralArg", 
		"argNameOrNumber", "argName", "argNumber", "type", "style", "pluralStyle", 
		"offsetValue", "selector", "explicitValue", "keyword"
	};

	public override string GrammarFileName { get { return "messageformat.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public messageformatParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class MessageContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public MessageTextContext messageText(int i) {
			return GetRuleContext<MessageTextContext>(i);
		}
		public MessageTextContext[] messageText() {
			return GetRuleContexts<MessageTextContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public MessageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_message; }
		public override void EnterRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.EnterMessage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.ExitMessage(this);
		}
	}

	[RuleVersion(0)]
	public MessageContext message() {
		MessageContext _localctx = new MessageContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_message);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32; messageText();
			State = 38;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==8) {
				{
				{
				State = 33; argument();
				State = 34; messageText();
				}
				}
				State = 40;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageTextContext : ParserRuleContext {
		public MessageTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_messageText; }
		public override void EnterRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.EnterMessageText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.ExitMessageText(this);
		}
	}

	[RuleVersion(0)]
	public MessageTextContext messageText() {
		MessageTextContext _localctx = new MessageTextContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_messageText);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 44;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			while ( _alt!=1 && _alt!=-1 ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 41;
					MatchWildcard();
					}
					} 
				}
				State = 46;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public PluralArgContext pluralArg() {
			return GetRuleContext<PluralArgContext>(0);
		}
		public SimpleArgContext simpleArg() {
			return GetRuleContext<SimpleArgContext>(0);
		}
		public NoneArgContext noneArg() {
			return GetRuleContext<NoneArgContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_argument; }
		public override void EnterRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_argument);
		try {
			State = 50;
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 47; simpleArg();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 48; noneArg();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 49; pluralArg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoneArgContext : ParserRuleContext {
		public ITerminalNode[] WS() { return GetTokens(messageformatParser.WS); }
		public ArgNameOrNumberContext argNameOrNumber() {
			return GetRuleContext<ArgNameOrNumberContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(messageformatParser.WS, i);
		}
		public NoneArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_noneArg; }
		public override void EnterRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.EnterNoneArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.ExitNoneArg(this);
		}
	}

	[RuleVersion(0)]
	public NoneArgContext noneArg() {
		NoneArgContext _localctx = new NoneArgContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_noneArg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52; Match(8);
			State = 56;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WS) {
				{
				{
				State = 53; Match(WS);
				}
				}
				State = 58;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 59; argNameOrNumber();
			State = 63;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WS) {
				{
				{
				State = 60; Match(WS);
				}
				}
				State = 65;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 66; Match(10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleArgContext : ParserRuleContext {
		public StyleContext style() {
			return GetRuleContext<StyleContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(messageformatParser.WS); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ArgNameOrNumberContext argNameOrNumber() {
			return GetRuleContext<ArgNameOrNumberContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(messageformatParser.WS, i);
		}
		public SimpleArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_simpleArg; }
		public override void EnterRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.EnterSimpleArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.ExitSimpleArg(this);
		}
	}

	[RuleVersion(0)]
	public SimpleArgContext simpleArg() {
		SimpleArgContext _localctx = new SimpleArgContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_simpleArg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; Match(8);
			State = 72;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WS) {
				{
				{
				State = 69; Match(WS);
				}
				}
				State = 74;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 75; argNameOrNumber();
			State = 79;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WS) {
				{
				{
				State = 76; Match(WS);
				}
				}
				State = 81;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 82; Match(5);
			State = 86;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WS) {
				{
				{
				State = 83; Match(WS);
				}
				}
				State = 88;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 89; type();
			State = 93;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WS) {
				{
				{
				State = 90; Match(WS);
				}
				}
				State = 95;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 104;
			_la = _input.La(1);
			if (_la==5) {
				{
				State = 96; Match(5);
				State = 100;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==WS) {
					{
					{
					State = 97; Match(WS);
					}
					}
					State = 102;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 103; style();
				}
			}

			State = 106; Match(10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PluralArgContext : ParserRuleContext {
		public ITerminalNode[] WS() { return GetTokens(messageformatParser.WS); }
		public ArgNameOrNumberContext argNameOrNumber() {
			return GetRuleContext<ArgNameOrNumberContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(messageformatParser.WS, i);
		}
		public PluralStyleContext pluralStyle() {
			return GetRuleContext<PluralStyleContext>(0);
		}
		public PluralArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_pluralArg; }
		public override void EnterRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.EnterPluralArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.ExitPluralArg(this);
		}
	}

	[RuleVersion(0)]
	public PluralArgContext pluralArg() {
		PluralArgContext _localctx = new PluralArgContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_pluralArg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; Match(8);
			State = 112;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WS) {
				{
				{
				State = 109; Match(WS);
				}
				}
				State = 114;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 115; argNameOrNumber();
			State = 119;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WS) {
				{
				{
				State = 116; Match(WS);
				}
				}
				State = 121;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 122; Match(5);
			State = 126;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WS) {
				{
				{
				State = 123; Match(WS);
				}
				}
				State = 128;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 129; Match(25);
			State = 133;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WS) {
				{
				{
				State = 130; Match(WS);
				}
				}
				State = 135;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 136; Match(5);
			State = 140;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WS) {
				{
				{
				State = 137; Match(WS);
				}
				}
				State = 142;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 143; pluralStyle();
			State = 147;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WS) {
				{
				{
				State = 144; Match(WS);
				}
				}
				State = 149;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 150; Match(10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgNameOrNumberContext : ParserRuleContext {
		public ArgNumberContext argNumber() {
			return GetRuleContext<ArgNumberContext>(0);
		}
		public ArgNameContext argName() {
			return GetRuleContext<ArgNameContext>(0);
		}
		public ArgNameOrNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_argNameOrNumber; }
		public override void EnterRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.EnterArgNameOrNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.ExitArgNameOrNumber(this);
		}
	}

	[RuleVersion(0)]
	public ArgNameOrNumberContext argNameOrNumber() {
		ArgNameOrNumberContext _localctx = new ArgNameOrNumberContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_argNameOrNumber);
		try {
			State = 154;
			switch (_input.La(1)) {
			case IDNUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 152; argNumber();
				}
				break;
			case IDNAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 153; argName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgNameContext : ParserRuleContext {
		public ITerminalNode IDNAME() { return GetToken(messageformatParser.IDNAME, 0); }
		public ArgNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_argName; }
		public override void EnterRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.EnterArgName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.ExitArgName(this);
		}
	}

	[RuleVersion(0)]
	public ArgNameContext argName() {
		ArgNameContext _localctx = new ArgNameContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_argName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156; Match(IDNAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgNumberContext : ParserRuleContext {
		public ITerminalNode IDNUMBER() { return GetToken(messageformatParser.IDNUMBER, 0); }
		public ArgNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_argNumber; }
		public override void EnterRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.EnterArgNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.ExitArgNumber(this);
		}
	}

	[RuleVersion(0)]
	public ArgNumberContext argNumber() {
		ArgNumberContext _localctx = new ArgNumberContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_argNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158; Match(IDNUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_type; }
		public override void EnterRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 9) | (1L << 12) | (1L << 17) | (1L << 19) | (1L << 21) | (1L << 23))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StyleContext : ParserRuleContext {
		public StyleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_style; }
		public override void EnterRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.EnterStyle(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.ExitStyle(this);
		}
	}

	[RuleVersion(0)]
	public StyleContext style() {
		StyleContext _localctx = new StyleContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_style);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 2) | (1L << 3) | (1L << 6) | (1L << 7) | (1L << 13) | (1L << 15) | (1L << 24))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PluralStyleContext : ParserRuleContext {
		public SelectorContext selector(int i) {
			return GetRuleContext<SelectorContext>(i);
		}
		public OffsetValueContext offsetValue() {
			return GetRuleContext<OffsetValueContext>(0);
		}
		public MessageContext[] message() {
			return GetRuleContexts<MessageContext>();
		}
		public ITerminalNode[] WS() { return GetTokens(messageformatParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(messageformatParser.WS, i);
		}
		public SelectorContext[] selector() {
			return GetRuleContexts<SelectorContext>();
		}
		public MessageContext message(int i) {
			return GetRuleContext<MessageContext>(i);
		}
		public PluralStyleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_pluralStyle; }
		public override void EnterRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.EnterPluralStyle(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.ExitPluralStyle(this);
		}
	}

	[RuleVersion(0)]
	public PluralStyleContext pluralStyle() {
		PluralStyleContext _localctx = new PluralStyleContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_pluralStyle);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			_la = _input.La(1);
			if (_la==18) {
				{
				State = 164; offsetValue();
				}
			}

			State = 183;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 167; selector();
				State = 171;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==WS) {
					{
					{
					State = 168; Match(WS);
					}
					}
					State = 173;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 174; Match(8);
				State = 175; message();
				State = 176; Match(10);
				State = 180;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,20,_ctx);
				while ( _alt!=2 && _alt!=-1 ) {
					if ( _alt==1 ) {
						{
						{
						State = 177; Match(WS);
						}
						} 
					}
					State = 182;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,20,_ctx);
				}
				}
				}
				State = 185;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 1) | (1L << 4) | (1L << 11) | (1L << 14) | (1L << 16) | (1L << 20) | (1L << 22))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OffsetValueContext : ParserRuleContext {
		public ITerminalNode IDNUMBER() { return GetToken(messageformatParser.IDNUMBER, 0); }
		public OffsetValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_offsetValue; }
		public override void EnterRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.EnterOffsetValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.ExitOffsetValue(this);
		}
	}

	[RuleVersion(0)]
	public OffsetValueContext offsetValue() {
		OffsetValueContext _localctx = new OffsetValueContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_offsetValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187; Match(18);
			State = 188; Match(IDNUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorContext : ParserRuleContext {
		public ExplicitValueContext explicitValue() {
			return GetRuleContext<ExplicitValueContext>(0);
		}
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public SelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_selector; }
		public override void EnterRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.EnterSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.ExitSelector(this);
		}
	}

	[RuleVersion(0)]
	public SelectorContext selector() {
		SelectorContext _localctx = new SelectorContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_selector);
		try {
			State = 192;
			switch (_input.La(1)) {
			case 14:
				EnterOuterAlt(_localctx, 1);
				{
				State = 190; explicitValue();
				}
				break;
			case 1:
			case 4:
			case 11:
			case 16:
			case 20:
			case 22:
				EnterOuterAlt(_localctx, 2);
				{
				State = 191; keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitValueContext : ParserRuleContext {
		public ITerminalNode IDNUMBER() { return GetToken(messageformatParser.IDNUMBER, 0); }
		public ExplicitValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_explicitValue; }
		public override void EnterRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.EnterExplicitValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.ExitExplicitValue(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitValueContext explicitValue() {
		ExplicitValueContext _localctx = new ExplicitValueContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_explicitValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194; Match(14);
			State = 195; Match(IDNUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_keyword; }
		public override void EnterRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 1) | (1L << 4) | (1L << 11) | (1L << 16) | (1L << 20) | (1L << 22))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xB6D5\x5D61\xF22C\xAD89\x44D2\xDF97\x846A\xE419\x3\x1E\xCA\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x3\x2\x3\x2\x3\x2\x3\x2\a\x2\'\n\x2\f\x2\xE\x2*\v"+
		"\x2\x3\x3\a\x3-\n\x3\f\x3\xE\x3\x30\v\x3\x3\x4\x3\x4\x3\x4\x5\x4\x35\n"+
		"\x4\x3\x5\x3\x5\a\x5\x39\n\x5\f\x5\xE\x5<\v\x5\x3\x5\x3\x5\a\x5@\n\x5"+
		"\f\x5\xE\x5\x43\v\x5\x3\x5\x3\x5\x3\x6\x3\x6\a\x6I\n\x6\f\x6\xE\x6L\v"+
		"\x6\x3\x6\x3\x6\a\x6P\n\x6\f\x6\xE\x6S\v\x6\x3\x6\x3\x6\a\x6W\n\x6\f\x6"+
		"\xE\x6Z\v\x6\x3\x6\x3\x6\a\x6^\n\x6\f\x6\xE\x6\x61\v\x6\x3\x6\x3\x6\a"+
		"\x6\x65\n\x6\f\x6\xE\x6h\v\x6\x3\x6\x5\x6k\n\x6\x3\x6\x3\x6\x3\a\x3\a"+
		"\a\aq\n\a\f\a\xE\at\v\a\x3\a\x3\a\a\ax\n\a\f\a\xE\a{\v\a\x3\a\x3\a\a\a"+
		"\x7F\n\a\f\a\xE\a\x82\v\a\x3\a\x3\a\a\a\x86\n\a\f\a\xE\a\x89\v\a\x3\a"+
		"\x3\a\a\a\x8D\n\a\f\a\xE\a\x90\v\a\x3\a\x3\a\a\a\x94\n\a\f\a\xE\a\x97"+
		"\v\a\x3\a\x3\a\x3\b\x3\b\x5\b\x9D\n\b\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3"+
		"\f\x3\f\x3\r\x5\r\xA8\n\r\x3\r\x3\r\a\r\xAC\n\r\f\r\xE\r\xAF\v\r\x3\r"+
		"\x3\r\x3\r\x3\r\a\r\xB5\n\r\f\r\xE\r\xB8\v\r\x6\r\xBA\n\r\r\r\xE\r\xBB"+
		"\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x5\xF\xC3\n\xF\x3\x10\x3\x10\x3\x10\x3"+
		"\x11\x3\x11\x3\x11\x3.\x2\x2\x12\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2"+
		"\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\x2\x5\b\x2"+
		"\v\v\xE\xE\x13\x13\x15\x15\x17\x17\x19\x19\a\x2\x4\x5\b\t\xF\xF\x11\x11"+
		"\x1A\x1A\b\x2\x3\x3\x6\x6\r\r\x12\x12\x16\x16\x18\x18\xD1\x2\"\x3\x2\x2"+
		"\x2\x4.\x3\x2\x2\x2\x6\x34\x3\x2\x2\x2\b\x36\x3\x2\x2\x2\n\x46\x3\x2\x2"+
		"\x2\fn\x3\x2\x2\x2\xE\x9C\x3\x2\x2\x2\x10\x9E\x3\x2\x2\x2\x12\xA0\x3\x2"+
		"\x2\x2\x14\xA2\x3\x2\x2\x2\x16\xA4\x3\x2\x2\x2\x18\xA7\x3\x2\x2\x2\x1A"+
		"\xBD\x3\x2\x2\x2\x1C\xC2\x3\x2\x2\x2\x1E\xC4\x3\x2\x2\x2 \xC7\x3\x2\x2"+
		"\x2\"(\x5\x4\x3\x2#$\x5\x6\x4\x2$%\x5\x4\x3\x2%\'\x3\x2\x2\x2&#\x3\x2"+
		"\x2\x2\'*\x3\x2\x2\x2(&\x3\x2\x2\x2()\x3\x2\x2\x2)\x3\x3\x2\x2\x2*(\x3"+
		"\x2\x2\x2+-\v\x2\x2\x2,+\x3\x2\x2\x2-\x30\x3\x2\x2\x2./\x3\x2\x2\x2.,"+
		"\x3\x2\x2\x2/\x5\x3\x2\x2\x2\x30.\x3\x2\x2\x2\x31\x35\x5\n\x6\x2\x32\x35"+
		"\x5\b\x5\x2\x33\x35\x5\f\a\x2\x34\x31\x3\x2\x2\x2\x34\x32\x3\x2\x2\x2"+
		"\x34\x33\x3\x2\x2\x2\x35\a\x3\x2\x2\x2\x36:\a\n\x2\x2\x37\x39\a\x1E\x2"+
		"\x2\x38\x37\x3\x2\x2\x2\x39<\x3\x2\x2\x2:\x38\x3\x2\x2\x2:;\x3\x2\x2\x2"+
		";=\x3\x2\x2\x2<:\x3\x2\x2\x2=\x41\x5\xE\b\x2>@\a\x1E\x2\x2?>\x3\x2\x2"+
		"\x2@\x43\x3\x2\x2\x2\x41?\x3\x2\x2\x2\x41\x42\x3\x2\x2\x2\x42\x44\x3\x2"+
		"\x2\x2\x43\x41\x3\x2\x2\x2\x44\x45\a\f\x2\x2\x45\t\x3\x2\x2\x2\x46J\a"+
		"\n\x2\x2GI\a\x1E\x2\x2HG\x3\x2\x2\x2IL\x3\x2\x2\x2JH\x3\x2\x2\x2JK\x3"+
		"\x2\x2\x2KM\x3\x2\x2\x2LJ\x3\x2\x2\x2MQ\x5\xE\b\x2NP\a\x1E\x2\x2ON\x3"+
		"\x2\x2\x2PS\x3\x2\x2\x2QO\x3\x2\x2\x2QR\x3\x2\x2\x2RT\x3\x2\x2\x2SQ\x3"+
		"\x2\x2\x2TX\a\a\x2\x2UW\a\x1E\x2\x2VU\x3\x2\x2\x2WZ\x3\x2\x2\x2XV\x3\x2"+
		"\x2\x2XY\x3\x2\x2\x2Y[\x3\x2\x2\x2ZX\x3\x2\x2\x2[_\x5\x14\v\x2\\^\a\x1E"+
		"\x2\x2]\\\x3\x2\x2\x2^\x61\x3\x2\x2\x2_]\x3\x2\x2\x2_`\x3\x2\x2\x2`j\x3"+
		"\x2\x2\x2\x61_\x3\x2\x2\x2\x62\x66\a\a\x2\x2\x63\x65\a\x1E\x2\x2\x64\x63"+
		"\x3\x2\x2\x2\x65h\x3\x2\x2\x2\x66\x64\x3\x2\x2\x2\x66g\x3\x2\x2\x2gi\x3"+
		"\x2\x2\x2h\x66\x3\x2\x2\x2ik\x5\x16\f\x2j\x62\x3\x2\x2\x2jk\x3\x2\x2\x2"+
		"kl\x3\x2\x2\x2lm\a\f\x2\x2m\v\x3\x2\x2\x2nr\a\n\x2\x2oq\a\x1E\x2\x2po"+
		"\x3\x2\x2\x2qt\x3\x2\x2\x2rp\x3\x2\x2\x2rs\x3\x2\x2\x2su\x3\x2\x2\x2t"+
		"r\x3\x2\x2\x2uy\x5\xE\b\x2vx\a\x1E\x2\x2wv\x3\x2\x2\x2x{\x3\x2\x2\x2y"+
		"w\x3\x2\x2\x2yz\x3\x2\x2\x2z|\x3\x2\x2\x2{y\x3\x2\x2\x2|\x80\a\a\x2\x2"+
		"}\x7F\a\x1E\x2\x2~}\x3\x2\x2\x2\x7F\x82\x3\x2\x2\x2\x80~\x3\x2\x2\x2\x80"+
		"\x81\x3\x2\x2\x2\x81\x83\x3\x2\x2\x2\x82\x80\x3\x2\x2\x2\x83\x87\a\x1B"+
		"\x2\x2\x84\x86\a\x1E\x2\x2\x85\x84\x3\x2\x2\x2\x86\x89\x3\x2\x2\x2\x87"+
		"\x85\x3\x2\x2\x2\x87\x88\x3\x2\x2\x2\x88\x8A\x3\x2\x2\x2\x89\x87\x3\x2"+
		"\x2\x2\x8A\x8E\a\a\x2\x2\x8B\x8D\a\x1E\x2\x2\x8C\x8B\x3\x2\x2\x2\x8D\x90"+
		"\x3\x2\x2\x2\x8E\x8C\x3\x2\x2\x2\x8E\x8F\x3\x2\x2\x2\x8F\x91\x3\x2\x2"+
		"\x2\x90\x8E\x3\x2\x2\x2\x91\x95\x5\x18\r\x2\x92\x94\a\x1E\x2\x2\x93\x92"+
		"\x3\x2\x2\x2\x94\x97\x3\x2\x2\x2\x95\x93\x3\x2\x2\x2\x95\x96\x3\x2\x2"+
		"\x2\x96\x98\x3\x2\x2\x2\x97\x95\x3\x2\x2\x2\x98\x99\a\f\x2\x2\x99\r\x3"+
		"\x2\x2\x2\x9A\x9D\x5\x12\n\x2\x9B\x9D\x5\x10\t\x2\x9C\x9A\x3\x2\x2\x2"+
		"\x9C\x9B\x3\x2\x2\x2\x9D\xF\x3\x2\x2\x2\x9E\x9F\a\x1D\x2\x2\x9F\x11\x3"+
		"\x2\x2\x2\xA0\xA1\a\x1C\x2\x2\xA1\x13\x3\x2\x2\x2\xA2\xA3\t\x2\x2\x2\xA3"+
		"\x15\x3\x2\x2\x2\xA4\xA5\t\x3\x2\x2\xA5\x17\x3\x2\x2\x2\xA6\xA8\x5\x1A"+
		"\xE\x2\xA7\xA6\x3\x2\x2\x2\xA7\xA8\x3\x2\x2\x2\xA8\xB9\x3\x2\x2\x2\xA9"+
		"\xAD\x5\x1C\xF\x2\xAA\xAC\a\x1E\x2\x2\xAB\xAA\x3\x2\x2\x2\xAC\xAF\x3\x2"+
		"\x2\x2\xAD\xAB\x3\x2\x2\x2\xAD\xAE\x3\x2\x2\x2\xAE\xB0\x3\x2\x2\x2\xAF"+
		"\xAD\x3\x2\x2\x2\xB0\xB1\a\n\x2\x2\xB1\xB2\x5\x2\x2\x2\xB2\xB6\a\f\x2"+
		"\x2\xB3\xB5\a\x1E\x2\x2\xB4\xB3\x3\x2\x2\x2\xB5\xB8\x3\x2\x2\x2\xB6\xB4"+
		"\x3\x2\x2\x2\xB6\xB7\x3\x2\x2\x2\xB7\xBA\x3\x2\x2\x2\xB8\xB6\x3\x2\x2"+
		"\x2\xB9\xA9\x3\x2\x2\x2\xBA\xBB\x3\x2\x2\x2\xBB\xB9\x3\x2\x2\x2\xBB\xBC"+
		"\x3\x2\x2\x2\xBC\x19\x3\x2\x2\x2\xBD\xBE\a\x14\x2\x2\xBE\xBF\a\x1C\x2"+
		"\x2\xBF\x1B\x3\x2\x2\x2\xC0\xC3\x5\x1E\x10\x2\xC1\xC3\x5 \x11\x2\xC2\xC0"+
		"\x3\x2\x2\x2\xC2\xC1\x3\x2\x2\x2\xC3\x1D\x3\x2\x2\x2\xC4\xC5\a\x10\x2"+
		"\x2\xC5\xC6\a\x1C\x2\x2\xC6\x1F\x3\x2\x2\x2\xC7\xC8\t\x4\x2\x2\xC8!\x3"+
		"\x2\x2\x2\x19(.\x34:\x41JQX_\x66jry\x80\x87\x8E\x95\x9C\xA7\xAD\xB6\xBB"+
		"\xC2";
	public static readonly ATN _ATN =
		ATNSimulator.Deserialize(_serializedATN.ToCharArray());
}
