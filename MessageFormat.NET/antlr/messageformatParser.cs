//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from messageformat.g4 by ANTLR 4.1-SNAPSHOT
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.1-SNAPSHOT")]
public partial class messageformatParser : Parser {
	public const int
		T__16=1, T__15=2, T__14=3, T__13=4, T__12=5, T__11=6, T__10=7, T__9=8, 
		T__8=9, T__7=10, T__6=11, T__5=12, T__4=13, T__3=14, T__2=15, T__1=16, 
		T__0=17, IDNUMBER=18, IDNAME=19, WS=20;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'long'", "'short'", "','", "'medium'", "'currency'", "'percent'", 
		"'ordinal'", "'number'", "' '", "'full'", "'{'", "'duration'", "'time'", 
		"'spellout'", "'integer'", "'}'", "'date'", "IDNUMBER", "IDNAME", "WS"
	};
	public const int
		RULE_message = 0, RULE_messageText = 1, RULE_argument = 2, RULE_noneArg = 3, 
		RULE_simpleArg = 4, RULE_argNameOrNumber = 5, RULE_argName = 6, RULE_argNumber = 7, 
		RULE_type = 8, RULE_style = 9;
	public static readonly string[] ruleNames = {
		"message", "messageText", "argument", "noneArg", "simpleArg", "argNameOrNumber", 
		"argName", "argNumber", "type", "style"
	};

	public override string GrammarFileName { get { return "messageformat.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public messageformatParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class MessageContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public MessageTextContext messageText(int i) {
			return GetRuleContext<MessageTextContext>(i);
		}
		public MessageTextContext[] messageText() {
			return GetRuleContexts<MessageTextContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public MessageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_message; }
		public override void EnterRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.EnterMessage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.ExitMessage(this);
		}
	}

	[RuleVersion(0)]
	public MessageContext message() {
		MessageContext _localctx = new MessageContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_message);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20; messageText();
			State = 24;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 21; argument();
				State = 22; messageText();
				}
				}
				State = 26;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==11 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageTextContext : ParserRuleContext {
		public MessageTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_messageText; }
		public override void EnterRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.EnterMessageText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.ExitMessageText(this);
		}
	}

	[RuleVersion(0)]
	public MessageTextContext messageText() {
		MessageTextContext _localctx = new MessageTextContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_messageText);
		try {
			int _alt;
			State = 35;
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 31;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
				while ( _alt!=1 && _alt!=-1 ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 28;
						MatchWildcard();
						}
						} 
					}
					State = 33;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
				}
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 34; Match(9);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public SimpleArgContext simpleArg() {
			return GetRuleContext<SimpleArgContext>(0);
		}
		public NoneArgContext noneArg() {
			return GetRuleContext<NoneArgContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_argument; }
		public override void EnterRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_argument);
		try {
			State = 39;
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 37; simpleArg();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 38; noneArg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoneArgContext : ParserRuleContext {
		public ArgNameOrNumberContext argNameOrNumber() {
			return GetRuleContext<ArgNameOrNumberContext>(0);
		}
		public NoneArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_noneArg; }
		public override void EnterRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.EnterNoneArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.ExitNoneArg(this);
		}
	}

	[RuleVersion(0)]
	public NoneArgContext noneArg() {
		NoneArgContext _localctx = new NoneArgContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_noneArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41; Match(11);
			State = 42; argNameOrNumber();
			State = 43; Match(16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleArgContext : ParserRuleContext {
		public StyleContext style() {
			return GetRuleContext<StyleContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ArgNameOrNumberContext argNameOrNumber() {
			return GetRuleContext<ArgNameOrNumberContext>(0);
		}
		public SimpleArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_simpleArg; }
		public override void EnterRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.EnterSimpleArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.ExitSimpleArg(this);
		}
	}

	[RuleVersion(0)]
	public SimpleArgContext simpleArg() {
		SimpleArgContext _localctx = new SimpleArgContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_simpleArg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45; Match(11);
			State = 46; argNameOrNumber();
			State = 47; Match(3);
			State = 48; type();
			State = 51;
			_la = _input.La(1);
			if (_la==3) {
				{
				State = 49; Match(3);
				State = 50; style();
				}
			}

			State = 53; Match(16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgNameOrNumberContext : ParserRuleContext {
		public ArgNumberContext argNumber() {
			return GetRuleContext<ArgNumberContext>(0);
		}
		public ArgNameContext argName() {
			return GetRuleContext<ArgNameContext>(0);
		}
		public ArgNameOrNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_argNameOrNumber; }
		public override void EnterRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.EnterArgNameOrNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.ExitArgNameOrNumber(this);
		}
	}

	[RuleVersion(0)]
	public ArgNameOrNumberContext argNameOrNumber() {
		ArgNameOrNumberContext _localctx = new ArgNameOrNumberContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_argNameOrNumber);
		try {
			State = 57;
			switch (_input.La(1)) {
			case IDNUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 55; argNumber();
				}
				break;
			case IDNAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 56; argName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgNameContext : ParserRuleContext {
		public ITerminalNode IDNAME() { return GetToken(messageformatParser.IDNAME, 0); }
		public ArgNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_argName; }
		public override void EnterRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.EnterArgName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.ExitArgName(this);
		}
	}

	[RuleVersion(0)]
	public ArgNameContext argName() {
		ArgNameContext _localctx = new ArgNameContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_argName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59; Match(IDNAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgNumberContext : ParserRuleContext {
		public ITerminalNode IDNUMBER() { return GetToken(messageformatParser.IDNUMBER, 0); }
		public ArgNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_argNumber; }
		public override void EnterRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.EnterArgNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.ExitArgNumber(this);
		}
	}

	[RuleVersion(0)]
	public ArgNumberContext argNumber() {
		ArgNumberContext _localctx = new ArgNumberContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_argNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61; Match(IDNUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_type; }
		public override void EnterRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==9) {
				{
				{
				State = 63; Match(9);
				}
				}
				State = 68;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 69;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 7) | (1L << 8) | (1L << 12) | (1L << 13) | (1L << 14) | (1L << 17))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 73;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==9) {
				{
				{
				State = 70; Match(9);
				}
				}
				State = 75;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StyleContext : ParserRuleContext {
		public StyleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_style; }
		public override void EnterRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.EnterStyle(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImessageformatListener typedListener = listener as ImessageformatListener;
			if (typedListener != null) typedListener.ExitStyle(this);
		}
	}

	[RuleVersion(0)]
	public StyleContext style() {
		StyleContext _localctx = new StyleContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_style);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==9) {
				{
				{
				State = 76; Match(9);
				}
				}
				State = 81;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 82;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 1) | (1L << 2) | (1L << 4) | (1L << 5) | (1L << 6) | (1L << 10) | (1L << 15))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 86;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==9) {
				{
				{
				State = 83; Match(9);
				}
				}
				State = 88;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xB6D5\x5D61\xF22C\xAD89\x44D2\xDF97\x846A\xE419\x3\x16\\\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x3\x2\x3\x2\x3\x2\x3\x2\x6\x2\x1B\n\x2\r\x2\xE\x2"+
		"\x1C\x3\x3\a\x3 \n\x3\f\x3\xE\x3#\v\x3\x3\x3\x5\x3&\n\x3\x3\x4\x3\x4\x5"+
		"\x4*\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x5\x6\x36\n\x6\x3\x6\x3\x6\x3\a\x3\a\x5\a<\n\a\x3\b\x3\b\x3\t\x3\t\x3"+
		"\n\a\n\x43\n\n\f\n\xE\n\x46\v\n\x3\n\x3\n\a\nJ\n\n\f\n\xE\nM\v\n\x3\v"+
		"\a\vP\n\v\f\v\xE\vS\v\v\x3\v\x3\v\a\vW\n\v\f\v\xE\vZ\v\v\x3\v\x3!\x2\x2"+
		"\f\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x2\x4\x5"+
		"\x2\t\n\xE\x10\x13\x13\x6\x2\x3\x4\x6\b\f\f\x11\x11[\x2\x16\x3\x2\x2\x2"+
		"\x4%\x3\x2\x2\x2\x6)\x3\x2\x2\x2\b+\x3\x2\x2\x2\n/\x3\x2\x2\x2\f;\x3\x2"+
		"\x2\x2\xE=\x3\x2\x2\x2\x10?\x3\x2\x2\x2\x12\x44\x3\x2\x2\x2\x14Q\x3\x2"+
		"\x2\x2\x16\x1A\x5\x4\x3\x2\x17\x18\x5\x6\x4\x2\x18\x19\x5\x4\x3\x2\x19"+
		"\x1B\x3\x2\x2\x2\x1A\x17\x3\x2\x2\x2\x1B\x1C\x3\x2\x2\x2\x1C\x1A\x3\x2"+
		"\x2\x2\x1C\x1D\x3\x2\x2\x2\x1D\x3\x3\x2\x2\x2\x1E \v\x2\x2\x2\x1F\x1E"+
		"\x3\x2\x2\x2 #\x3\x2\x2\x2!\"\x3\x2\x2\x2!\x1F\x3\x2\x2\x2\"&\x3\x2\x2"+
		"\x2#!\x3\x2\x2\x2$&\a\v\x2\x2%!\x3\x2\x2\x2%$\x3\x2\x2\x2&\x5\x3\x2\x2"+
		"\x2\'*\x5\n\x6\x2(*\x5\b\x5\x2)\'\x3\x2\x2\x2)(\x3\x2\x2\x2*\a\x3\x2\x2"+
		"\x2+,\a\r\x2\x2,-\x5\f\a\x2-.\a\x12\x2\x2.\t\x3\x2\x2\x2/\x30\a\r\x2\x2"+
		"\x30\x31\x5\f\a\x2\x31\x32\a\x5\x2\x2\x32\x35\x5\x12\n\x2\x33\x34\a\x5"+
		"\x2\x2\x34\x36\x5\x14\v\x2\x35\x33\x3\x2\x2\x2\x35\x36\x3\x2\x2\x2\x36"+
		"\x37\x3\x2\x2\x2\x37\x38\a\x12\x2\x2\x38\v\x3\x2\x2\x2\x39<\x5\x10\t\x2"+
		":<\x5\xE\b\x2;\x39\x3\x2\x2\x2;:\x3\x2\x2\x2<\r\x3\x2\x2\x2=>\a\x15\x2"+
		"\x2>\xF\x3\x2\x2\x2?@\a\x14\x2\x2@\x11\x3\x2\x2\x2\x41\x43\a\v\x2\x2\x42"+
		"\x41\x3\x2\x2\x2\x43\x46\x3\x2\x2\x2\x44\x42\x3\x2\x2\x2\x44\x45\x3\x2"+
		"\x2\x2\x45G\x3\x2\x2\x2\x46\x44\x3\x2\x2\x2GK\t\x2\x2\x2HJ\a\v\x2\x2I"+
		"H\x3\x2\x2\x2JM\x3\x2\x2\x2KI\x3\x2\x2\x2KL\x3\x2\x2\x2L\x13\x3\x2\x2"+
		"\x2MK\x3\x2\x2\x2NP\a\v\x2\x2ON\x3\x2\x2\x2PS\x3\x2\x2\x2QO\x3\x2\x2\x2"+
		"QR\x3\x2\x2\x2RT\x3\x2\x2\x2SQ\x3\x2\x2\x2TX\t\x3\x2\x2UW\a\v\x2\x2VU"+
		"\x3\x2\x2\x2WZ\x3\x2\x2\x2XV\x3\x2\x2\x2XY\x3\x2\x2\x2Y\x15\x3\x2\x2\x2"+
		"ZX\x3\x2\x2\x2\f\x1C!%)\x35;\x44KQX";
	public static readonly ATN _ATN =
		ATNSimulator.Deserialize(_serializedATN.ToCharArray());
}
